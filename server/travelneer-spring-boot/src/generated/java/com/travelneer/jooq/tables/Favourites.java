/*
 * This file is generated by jOOQ.
*/
package com.travelneer.jooq.tables;


import com.travelneer.jooq.Indexes;
import com.travelneer.jooq.Keys;
import com.travelneer.jooq.Travelneer;
import com.travelneer.jooq.tables.records.FavouritesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Favourites extends TableImpl<FavouritesRecord> {

    private static final long serialVersionUID = 1628244241;

    /**
     * The reference instance of <code>travelneer.favourites</code>
     */
    public static final Favourites FAVOURITES = new Favourites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FavouritesRecord> getRecordType() {
        return FavouritesRecord.class;
    }

    /**
     * The column <code>travelneer.favourites.post_id</code>.
     */
    public final TableField<FavouritesRecord, Integer> POST_ID = createField("post_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>travelneer.favourites.user_id</code>.
     */
    public final TableField<FavouritesRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>travelneer.favourites.created_at</code>.
     */
    public final TableField<FavouritesRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>travelneer.favourites</code> table reference
     */
    public Favourites() {
        this(DSL.name("favourites"), null);
    }

    /**
     * Create an aliased <code>travelneer.favourites</code> table reference
     */
    public Favourites(String alias) {
        this(DSL.name(alias), FAVOURITES);
    }

    /**
     * Create an aliased <code>travelneer.favourites</code> table reference
     */
    public Favourites(Name alias) {
        this(alias, FAVOURITES);
    }

    private Favourites(Name alias, Table<FavouritesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Favourites(Name alias, Table<FavouritesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Travelneer.TRAVELNEER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FAVOURITES_POST_ID, Indexes.FAVOURITES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FavouritesRecord> getPrimaryKey() {
        return Keys.KEY_FAVOURITES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FavouritesRecord>> getKeys() {
        return Arrays.<UniqueKey<FavouritesRecord>>asList(Keys.KEY_FAVOURITES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FavouritesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FavouritesRecord, ?>>asList(Keys.FAVOURITES_IBFK_2, Keys.FAVOURITES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Favourites as(String alias) {
        return new Favourites(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Favourites as(Name alias) {
        return new Favourites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(String name) {
        return new Favourites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(Name name) {
        return new Favourites(name, null);
    }
}
