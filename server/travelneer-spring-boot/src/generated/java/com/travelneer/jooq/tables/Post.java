/*
 * This file is generated by jOOQ.
*/
package com.travelneer.jooq.tables;


import com.travelneer.jooq.Indexes;
import com.travelneer.jooq.Keys;
import com.travelneer.jooq.Travelneer;
import com.travelneer.jooq.tables.records.PostRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1340953161;

    /**
     * The reference instance of <code>travelneer.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>travelneer.post.id</code>.
     */
    public final TableField<PostRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>travelneer.post.content</code>.
     */
    public final TableField<PostRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>travelneer.post.author_id</code>.
     */
    public final TableField<PostRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>travelneer.post.country_id</code>.
     */
    public final TableField<PostRecord, Short> COUNTRY_ID = createField("country_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>travelneer.post.favourites_count</code>.
     */
    public final TableField<PostRecord, Integer> FAVOURITES_COUNT = createField("favourites_count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>travelneer.post.created_at</code>.
     */
    public final TableField<PostRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>travelneer.post</code> table reference
     */
    public Post() {
        this(DSL.name("post"), null);
    }

    /**
     * Create an aliased <code>travelneer.post</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>travelneer.post</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Travelneer.TRAVELNEER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POST_AUTHOR_ID, Indexes.POST_COUNTRY_ID, Indexes.POST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PostRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.KEY_POST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostRecord>> getKeys() {
        return Arrays.<UniqueKey<PostRecord>>asList(Keys.KEY_POST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PostRecord, ?>>asList(Keys.POST_IBFK_1, Keys.POST_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }
}
